// -*- c++ -*-
/**
  @file NonShadowedPass.pix
  @author Morgan McGuire morgan@cs.williams.edu

  For use with G3D::SuperShader.

  @edited  2008-10-20
  @created 2007-12-18
 */

/** World space light position */
uniform vec4        lightPosition0;
uniform vec3        lightColor0;
/** Spot light facing direction (unit length) */
uniform vec3        lightDirection0;
/** w element is the spotlight cutoff angle*/
uniform vec4        lightAttenuation0;

uniform vec4        lightPosition1;
uniform vec3        lightColor1;
uniform vec3        lightDirection1;
uniform vec4        lightAttenuation1;

uniform vec4        lightPosition2;
uniform vec3        lightColor2;
uniform vec3        lightDirection2;
uniform vec4        lightAttenuation2;

uniform vec4        lightPosition3;
uniform vec3        lightColor3;
uniform vec3        lightDirection3;
uniform vec4        lightAttenuation3;

uniform samplerCube environmentMap;

#ifdef CUSTOMCONSTANT
    uniform vec4        customConstant;
#endif

#ifdef CUSTOMMAP
    uniform sampler2D   customMap;
#endif

// Material
#ifdef REFLECTCONSTANT
    uniform vec3        reflectConstant;
#endif

#ifdef REFLECTMAP
    uniform sampler2D   reflectMap;
#endif

#ifdef SPECULARCONSTANT
    uniform vec3        specularConstant;
#endif

#ifdef SPECULARMAP
    uniform sampler2D   specularMap;
#endif

#ifdef SPECULAREXPONENTCONSTANT
    uniform vec3        specularExponentConstant;
#endif

#ifdef SPECULAREXPONENTMAP
    uniform sampler2D   specularExponentMap;
#endif

#ifdef EMITCONSTANT
    uniform vec3        emitConstant;
#endif

#ifdef EMITMAP
    uniform sampler2D   emitMap;
#endif

#ifdef DIFFUSECONSTANT
    uniform vec3        diffuseConstant;
#endif

#ifdef DIFFUSEMAP
    uniform sampler2D   diffuseMap;
#endif

#ifdef NORMALBUMPMAP
    /** Multiplier for bump map.  Typically on the range [0, 0.05]
      This increases with texture scale and bump height. */
    uniform float       bumpMapScale;

    /** How high is the 0-level of the bump map? On the range [0, 1] */
    uniform float       bumpMapBias;

    /** xyz = normal, w = bump height */
    uniform sampler2D   normalBumpMap;

    /** Un-normalized (interpolated) tangent space eye vector */
    varying vec3        _tsE;
    varying vec4        tan_X, tan_Y, tan_W;
#endif

varying vec4        tan_Z;
uniform vec3        ambientTop;
uniform vec3        ambientBottom;

// World parameters
varying vec3        wsPosition;
varying vec2        texCoord;

/** Set to -1 to flip the normal. */
uniform float       backside;

/** Used for "ambient occlusion" */
varying float       accessibility;

void addLightContribution(in vec3 wsN, in vec3 wsR, in vec3 wsPosition, in vec4 specularExponentColor, 
                          in vec4 lightPosition, in vec4 lightAttenuation, in vec3 lightDirection,
                          in vec3 lightColor, inout vec3 I_diffuse, inout vec3 I_specular) {
    
    // Light vector
    vec3 wsL = lightPosition.xyz - wsPosition.xyz * lightPosition.w;
    float lightDistance = length(wsL);
    wsL = wsL / lightDistance;

    vec3 attLightColor = 
        // Spotlight cone (lightAttenuation.w = -1 for other lights)
        (-dot(lightDirection, wsL) >= lightAttenuation.w) ? 

                // Within spotlight cone
                (lightColor / dot( vec3(1.0, lightDistance, lightDistance * lightDistance), lightAttenuation.xyz)) : 

                // Outside spotlight cone
                vec3(0.0, 0.0, 0.0);

#   ifdef NORMALBUMPMAP
        // For a bump mapped surface, do not allow illumination on the back side even if the
        // displacement creates a light-facing surface, since it should be self-shadowed for any 
        // large polygon.
        attLightColor = attLightColor * float(dot(tan_Z.xyz, wsL) * backside > 0.0);
#   endif

#   if defined(DIFFUSECONSTANT) || defined(DIFFUSEMAP)
        I_diffuse = I_diffuse + max(dot(wsL, wsN), 0.0) * attLightColor;
#   endif

#   if defined(SPECULARCONSTANT) || defined(SPECULARMAP)
        I_specular = I_specular + pow(vec3(max(dot(wsL, wsR), 0.0)), specularExponentColor.rgb) * attLightColor;
#   endif
}


#ifdef NORMALBUMPMAP
#   if (PARALLAXSTEPS == 0)

    /**
     Normal mapping
     Following the algorithm of Blinn '78
     */
    void applyBumpMap(out vec3 wsN, out vec2 offsetTexCoord) {
        
        offsetTexCoord = texCoord.xy;
    	    
        // Take the normal map values back to (-1, 1) range to compute a tangent space normal
        vec3 tsN = texture2D(normalBumpMap, offsetTexCoord).xyz * 2.0 + vec3(-1.0, -1.0, -1.0);

        // note that the columns might be slightly not orthogonal due to interpolation
        mat3 tangentToWorld = mat3(tan_X.xyz, tan_Y.xyz, tan_Z.xyz);

        // Take the normal to world space
        wsN = (tangentToWorld * tsN) * backside;
    }

#   elif (PARALLAXSTEPS <= 1)

    /**
     Parallax mapping
     Following the algorithm of Welsh '04
     */
    void applyBumpMap(out vec3 wsN, out vec2 offsetTexCoord) {
        // Convert bumps to a world space distance
        float bump = (texture2D(normalBumpMap, texCoord).w - 0.5) * bumpMapScale;

        vec3 tsE = normalize(_tsE);

        // Offset the texture coord.  Note that texture coordinates are inverted (in the y direction)
        // from TBN space, so we must flip the y-axis.

        offsetTexCoord = texCoord.xy + vec2(tsE.x, -tsE.y) * bump;
    	    
        // Take the normal map values back to (-1, 1) range to compute a tangent space normal
        vec3 tsN = texture2D(normalBumpMap, offsetTexCoord).xyz * 2.0 + vec3(-1.0, -1.0, -1.0);

        // note that the columns might be slightly not orthogonal due to interpolation
        mat3 tangentToWorld = mat3(tan_X.xyz, tan_Y.xyz, tan_Z.xyz);

        // Take the normal to world space
        wsN = (tangentToWorld * tsN) * backside;
    }


#   else

    /**
     Parallax Occlusion Mapping (POM)

     Following the algorithm of Tatarchuk I3D '06
     
     Linear search and linear interpolation after the hit.
     Constants have been adjusted to give high performance on GeForce cards.
     */
    void applyBumpMap(out vec3 wsN, out vec2 offsetTexCoord) {
        vec3 tsE = normalize(_tsE);

        // Actual texture coordinate that we'll use based on
        // parallax offset.  The z coordinate is the height of the
        // bump above the surface
        vec3 offsetCoord;

        // Packed tangent space normals (to be unpacked below)
        vec3 tsN;

        // Back up the intersection since we should be entering the surface
        // at the top of the bounding box (bump = 1) and the initial intersection point 
        // is with bump = 0.5
        //
        // Note that we negate tsE because tsE points towards the eye
        // and we're walking away from the eye; also note that we negate
        // the y coordinate because our texture coords are inverted in y.
        offsetCoord.xy = texCoord - bumpMapBias * bumpMapScale * vec2(-tsE.x, tsE.y) / tsE.z;

        // Normalized height of the eye ray above the surface (i.e., not multiplied 
        // by bumpScale to avoid the cost of bump height on the inner loop.)
        offsetCoord.z = 1.0;
        const float MIN_STEPS = 2.0;

        // Increase the number of steps taken as the eye vector begins 
        // to point more horizontally (ala Tatarchuk).  Expand the range of tsE.z; it rarely gets near zero on its own.

        float numSteps = mix(max(float(PARALLAXSTEPS) * bumpMapScale * 2, MIN_STEPS), MIN_STEPS,  max(0.0, (tsE.z - 0.4) / 0.6) );
        vec3 tsStep;

        // Distance that we'll step in z (normal direction) for each 
        // iteration; by definition we have to cover bumpScale distance
        // in numSteps.
        tsStep.z = -1.0 / numSteps; 

        // Corresponding (x, y) step, by similar triangles; note that
        // tsStep.z is negative so we've negated the eye vector again,
        // giving us back the positive version.
        tsStep.xy = (vec2(tsE.x, -tsE.y) / tsE.z) * (bumpMapScale * tsStep.z);

        // Surface normal and bump map values.
        vec4 NB = texture2D(normalBumpMap, offsetCoord.xy);

        // March forward until the view ray sinks below the current
        // surface elevation.  At each point, offsetCoord will be the
        // next location, and we'll overshoot slightly.
        while (NB.w < offsetCoord.z) {
            offsetCoord += tsStep;
            NB = texture2D(normalBumpMap, offsetCoord.xy);
        }

        // We've overshot slightly.  Assume that the surface is piecewise linear ala Policarop and Oliveira '06, Tatarchuk '06
        //
        // By similar triangles, the overshoot is thus governed by the ratios:
        // 
        //    last ray elevation - last surface elevation             surface dist from last to true intersection             P
        //  -----------------------------------------------      =   -------------------------------------------------   = -------
        //  current surface elevation - current ray elevation         surface dist from current to true intersection          Q
        //
        // In other words, we want to step back by (tsStep * Q / (P + Q)).  The denominator of that ratio
        // can never be zero or we would be travelling parallel to the surface and should have hit on the
        // previous iteration.  However, it can be very small--so small that it underflows.
        //
        // P = (offsetCoord.z - tsStep.z) - prevNB.w;
        // Q = NB.w - offsetCoord.z;
        //
        // alpha = 
        // Q / (P + Q) = (NB.w - offsetCoord.z) / ( (offsetCoord.z - tsStep.z) - prevNB.w + NB.w - offsetCoord.z)
        //             = (NB.w - offsetCoord.z) / (NB.w -tsStep.z - prevNB.w)
        
        // (We could have tracked prevNB in the inner while loop, but in testing on NVIDIA GeForce 7800, 
        // it was faster to just perform one very-coherent texture read at the end than add instructions to
        // the inner loop)
        vec4 prevNB = texture2D(normalBumpMap, offsetCoord.xy - tsStep.xy);

        float denom = NB.w - tsStep.z - prevNB.w;
        denom = max(abs(denom), 0.125) * sign(denom);
        float alpha = (NB.w - offsetCoord.z) / denom;
        offsetCoord -= tsStep * alpha;

        // Take the tangent back appropriately
        tsN = mix(NB.xyz, prevNB.xyz, alpha) * 2.0 + vec3(-1.0, -1.0, -1.0);

        offsetTexCoord = offsetCoord.xy;

        // Note that the columns might be slightly not orthogonal due to interpolation
        mat3 tangentToWorld = mat3(tan_X.xyz, tan_Y.xyz, tan_Z.xyz * backside);

        // Take the normal to world space
        wsN = (tangentToWorld * tsN); 
    }
#   endif // Parallax Steps > 1
#endif


void main(void) {

    const vec3 BLACK = vec3(0.0, 0.0, 0.0);

    vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;

#   ifdef NORMALBUMPMAP

        vec3 wsN;
        vec2 offsetTexCoord;
        applyBumpMap(wsN, offsetTexCoord);

#   else

        // World space normal
        vec3 wsN = tan_Z.xyz * backside;
        vec2 offsetTexCoord = texCoord;

#   endif


#   if defined(REFLECTCONSTANT) || defined(REFLECTMAP) || defined(SPECULARCONSTANT) || defined(SPECULARMAP)
        // Eye vector
        vec3 wsE = wsEyePos - wsPosition;
        // or... (tangentToWorld * vec4(tsE, 0.0)).xyz;

        // Reflection vector
        vec3 wsR = normalize((wsN * 2.0 * dot(wsN, wsE)) - wsE);
#   else
        const vec3 wsR = BLACK;
#   endif

#   if (defined(DIFFUSECONSTANT) || defined(DIFFUSEMAP))
        vec4 diffuseColor =
#       ifdef DIFFUSECONSTANT
            vec4(diffuseConstant, 1.0)
#           ifdef DIFFUSEMAP
                * texture2D(diffuseMap, offsetTexCoord)
#           endif
#       else
            texture2D(diffuseMap, offsetTexCoord)
#       endif
        ;
#   endif


#   if defined(EMITCONSTANT) || defined(EMITMAP)     
        vec4 emitColor =
#       ifdef EMITCONSTANT
            vec4(emitConstant, 1.0)
#           ifdef EMITMAP
                * texture2D(emitMap, offsetTexCoord)
#           endif
#       else
            texture2D(emitMap, offsetTexCoord)
#       endif
        ;
#   endif


#   if defined(SPECULARCONSTANT) || defined(SPECULARMAP)     
        vec4 specularColor =
#       ifdef SPECULARCONSTANT
            vec4(specularConstant, 1.0)
#           ifdef SPECULARMAP
                * texture2D(specularMap, offsetTexCoord)
#           endif
#       else
            texture2D(specularMap, offsetTexCoord)
#       endif
        ;
#   endif


#   if defined(SPECULAREXPONENTCONSTANT) || defined(SPECULAREXPONENTMAP)     
        vec4 specularExponentColor =
#       ifdef SPECULAREXPONENTCONSTANT
            vec4(specularExponentConstant, 1.0)
#           ifdef SPECULAREXPONENTMAP
                * texture2D(specularExponentMap, offsetTexCoord)
#           endif
#       else
            texture2D(specularExponentMap, offsetTexCoord)
#       endif
        ;
#   else
        vec4 specularExponentColor = vec4(1.0, 1.0, 1.0, 1.0);
#   endif


#   if defined(REFLECTCONSTANT) || defined(REFLECTMAP)     
        vec4 reflectColor =
#       ifdef REFLECTCONSTANT
            vec4(reflectConstant, 1)
#           ifdef REFLECTMAP
                 * texture2D(reflectMap, offsetTexCoord)
#           endif
#       else
            texture2D(reflectMap, offsetTexCoord)
#       endif
        ;
#   endif


    vec3 I_diffuse  = ambientTop + (ambientTop - ambientBottom) * min(wsN.y, 0.0);
    vec3 I_specular = BLACK;

    addLightContribution(wsN, wsR, wsPosition, specularExponentColor, lightPosition0, lightAttenuation0, lightDirection0, lightColor0, I_diffuse, I_specular);
    addLightContribution(wsN, wsR, wsPosition, specularExponentColor, lightPosition1, lightAttenuation1, lightDirection1, lightColor1, I_diffuse, I_specular);
    addLightContribution(wsN, wsR, wsPosition, specularExponentColor, lightPosition2, lightAttenuation2, lightDirection2, lightColor2, I_diffuse, I_specular);
    addLightContribution(wsN, wsR, wsPosition, specularExponentColor, lightPosition3, lightAttenuation3, lightDirection3, lightColor3, I_diffuse, I_specular);

    gl_FragColor.rgb =
        BLACK
#       if defined(EMITCONSTANT) || defined(EMITMAP)
            + emitColor.rgb
#       endif
        + accessibility * (

        BLACK

#       if defined(DIFFUSECONSTANT) || defined(DIFFUSEMAP)
           + I_diffuse * diffuseColor.rgb 
#       endif

#       if defined(SPECULARCONSTANT) || defined(SPECULARMAP)
            + I_specular * specularColor.rgb
#       endif

#       if defined(REFLECTCONSTANT) || defined(REFLECTMAP)     
            + textureCube(environmentMap, wsR).rgb
            * reflectColor.rgb
#       endif
        );

    gl_FragColor.a = 1.0
#       if defined(EMITCONSTANT) || defined(EMITMAP)
            * emitColor.a
#       endif

#       if defined(DIFFUSECONSTANT) || defined(DIFFUSEMAP)
            * diffuseColor.a
#       endif

#       if defined(SPECULARCONSTANT) || defined(SPECULARMAP)
            * specularColor.a
#       endif

#       if defined(SPECULAREXPONENTRCONSTANT) || defined(SPECULAREXPONENTMAP)
            * specularExponentColor.a
#       endif

#       if defined(REFLECTCONSTANT) || defined(REFLECTMAP)     
            * reflectColor.a
#       endif
        ;

}
