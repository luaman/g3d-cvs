/** @page guidenewuser Information for New Users

This page gives a quick overview of %G3D for new users. For
information on how to install %G3D on your system and compile your own
projects that use %G3D, see the Installing %G3D page for your
operating system linked from the <a href="index.html">title page</a>.

Refer to the <a href="../demos/starter/">demos/starter</a> starter project
for a small example program of how most people use G3D.

\htmlonly <hr noshade> \endhtmlonly

@section g3dframework GApp Framework

Every application needs a framework that manages events, provides a
command-line or graphical user interface, and initializes key
subsystems like OpenGL and Winsock.  

Small games, research projects, and homework assignments are written
on short shedules and have limited GUI needs.  The G3D::GApp class is
designed to get such projects running quickly and easily.  See <a href="../demos/empty/main.cpp">empty/main.cpp</a> for a sample program using it.

G3D::GApp will create a window, initialize OpenGL, create a log file,
and provide you with framerate and a debugging user interface.  It
works exactly the same on every platform, so you can write once and
run anywhere.  By subclassing it you can override methods to respond
to various high-level events like keypresses, rendering once per
frame, and processing input from the network or simulation.

\htmlonly <hr noshade> \endhtmlonly

@section externalframe External Framework

If you are using the GApp framework you can skip this section.

Major commercial projects, expecially ones where %G3D is being added to an existing codebase,
may require a different application structure than GApp provides.
You can either connect directly to your operating
system's windowing system or a 3rd party GUI library like wxWidgets,
FLTK, QT, or Glut.  In such an application, the non-G3D framework
creates the windows and G3D renders inside a client window that you
designate.

When using an external framework you must explicitly create a
G3D::GWindow that represents the operating system window into which
you will render.  How you do this depends on your choice of external
framework.  For any framework on Windows, you can use the
G3D::Win32Window subclass and initialize it from a HDC or HWND.  User-supported
G3D::GWindow subclasses for many popular windowing packages like wxWidgets are available
on the internet. If you are not on Windows and are using
an external framework for which there is no published package, you must 
subclass G3D::GWindow yourself and implement all of its pure virtual methods.

Once you have a G3D::GWindow subclass object, construct a
G3D::RenderDevice.  This is the interface to OpenGL rendering.  You
may also wish to create a G3D::UserInput, which gives polling access to
the keyboard, mouse, and joystick.  

In your rendering callback (which is determined by the external
application framework), place rendering calls between
G3D::RenderDevice::beginFrame() and G3D::RenderDevice::endFrame().
This constructs an image on the back buffer--to make it visible you
must invoke G3D::GWindow::swapOpenGLBuffers().

\htmlonly <hr noshade> \endhtmlonly

@section noframework G3D as a Utility Library

If you have already chosen a framework you can skip this section.

Some features in %G3D are useful to any program, regardles of whether
it performs 3D computations or runs on a graphics processor.  These
include the platform independent G3D::GThread and G3D::GMutex, data
structures like G3D::Array, G3D::Set, G3D::Table, and G3D::Queue that
are both fast and easy to use, and the G3D::System class that provides
fast memory management, timing, and CPU information.

When using %G3D as a utility library no GUI framework is necessary. To
support utility usage, the library is split into two pieces: %G3D.lib
and %GLG3D.lib.  All event-handling, windowed, and OpenGl code is in
the %GLG3D.lib portion.  This means that you can use %G3D.lib without
linking against OpenGL or setting up an event handling routine.

\htmlonly <hr noshade> \endhtmlonly
*/
