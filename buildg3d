#!/usr/bin/env python
# -*- python -*-

from buildlib import *
import os
import platform
import commands
import sys
sys.path.append('bin')
import ice.copyifnewer

doxygen = 'doxygen'

def copyIfNewer(source, dest):
    if platform.system() == 'Windows':
        # Just use the binary for this
        return os.spawnv(os.P_WAIT, 'bin/copyifnewer.exe', ['--exclusions', source, dest])
    else:
        # Use python commands
        ice.copyifnewer.copyIfNewer(source, dest)
        return 0


##################################################################################
#  CMake targets

osTable = \
    {'Windows'  : 'win32',
     'Linux'    : 'linux',
     'Darwin'   : 'osx',
     'FreeBSD'  : 'freebsd'}

compilerTable = \
    {'vc6'      : 'Visual Studio 6',
     'vc7'      : 'Visual Studio 7',
     'vc71'     : 'Visual Studio 7 .NET 2003',
     'vc8'      : 'Visual Studio 8 2005',
     'gcc'      : 'gcc',
     'xcode'    : 'XCode'}

def platform_directory(compiler):
        
    operating_system = osTable[platform.system()]

    machine = 'i386'
    if operating_system != 'Windows':
        machine = platform.machine()

    return operating_system + '-' + machine + '-' + compiler

def process_args(args):
    if args[0] != '--compiler':
        print "Usage error: " + args[0] + " invalid option."
        exit(0)

    compilerName = compilerTable[args[1]]

    return compilerName

# Helper function for building libraries from scratch
def cbuild(subdir, args):
    x = 0
    start_dir = os.getcwd()
    build_dir = start_dir + '/build/' + subdir
    mkdir (build_dir)
    
    if (os.path.exists(build_dir)):
        os.chdir (build_dir)
        print ('Changed directory to: ' + os.getcwd())
        x = run('cmake', args)
        if x == 0: x = run('make', [])  
        os.chdir(start_dir)
    else:
        print ('Unable to change directories to:\n\t' + build_dir)
        x = 1

    return x

# Helper function for building libraries from existing CMakeLists.txt
# This will only work on make systems -- needs to be generalized
def cfastbuild(subdir):
    start_dir = os.getcwd()
    build_dir = start_dir + "/build/" + subdir
    os.chdir (build_dir)
    if (os.path.exists(build_dir)):
        print ("Changed directory to: " + os.getcwd())
        run("make", [])
        os.chdir(start_dir)
    else:
        print ("Unable to change directories to:\n\t" + build_dir)
 
def clib(cl_args):
    output_dir = "-DPLATFORM_DIR:STRING=" + platform_directory(getCompilerName(cl_args))
    args = [os.getcwd(), '-DBUILD_BINARIES:BOOL=OFF', output_dir]

    # Build Debug Version
    cbuild("Debug", args + ['-DCMAKE_BUILD_TYPE:STRING=Debug'])
    
    # Build Release Version
    cbuild("Release", args + ['-DCMAKE_BUILD_TYPE:STRING=Release'])

    # Copy code for includes and libraries goes here....

def cclean(cl_args):
    rmdir(os.getcwd() + '/build')

def ctest(cl_args):
    output_dir = "-DPLATFORM_DIR:STRING=" + platform_directory(getCompilerName(cl_args))
    args = [os.getcwd(), '-DBUILD_BINARIES:BOOL=ON', output_dir]

    # Build Debug Version
    cbuild("Debug", args + ['-DCMAKE_BUILD_TYPE:STRING=Debug'])
    
    # Build Release Version
    cbuild("Release", args + ['-DCMAKE_BUILD_TYPE:STRING=Release'])

def cfastlib(args):
    cfastbuild(platform_directory(args) + "/Debug")
    cfastbuild(platform_directory(args) + "/Release")


##################################################################################
#  iCompile targets

""" Runs iCompile in both debug and release mode (if debug succeeds) and returns
    the error code from the last run. 
"""
def runicompile(dir):
     os.chdir(dir)
     x = run('../bin/icompile', ['--noprompt'])

     if (x == 0): 
         x =run('../bin/icompile', ['-O', '--noprompt'])

     os.chdir('..')

     return x

def ilib(args):
     x = 0

     if (os.uname()[0] == 'Darwin') or (os.uname()[0] == 'WinNT'):
         # Build jpeg
         if x == 0: x = runicompile('jpeg.lib')

     if (os.uname()[0] == 'WinNT'):
         # Build zlib
         if x == 0: runicompile('zlib.lib')

     if (os.uname()[0] == 'Darwin') or (os.uname()[0] == 'WinNT'):
         # Build png
         if x == 0: x = runicompile('png.lib')

     if (x == 0):
         x = runicompile('G3D.lib')

     if (x == 0):
         x = runicompile('GLG3D.lib')

     return x


def iclean(args):
     os.chdir("G3D.lib")
     run("../bin/icompile", ['--clean'])

     os.chdir("../GLG3D.lib")
     run("../bin/icompile", ['--clean'])

     os.chdir('../jpeg.lib')
     run("../bin/icompile", ['--clean'])

     os.chdir('../png.lib')
     run("../bin/icompile", ['--clean'])

     os.chdir("../test")
     run("../bin/icompile", ['--clean'])
     os.chdir("..")


def itest(args):
    os.chdir("test")
    x = run('../bin/icompile', ['--noprompt', '--run'])
    if (x == 0):
        x = run('../bin/icompile', ['--noprompt', '-O', '--run'])
    os.chdir('..')

    if (x == 0):
        # Make sure that the other applications can at least build
        x = runicompile('gfxmeter')

    return x

################################################################################

def doc(args):
    env = {'HEADER_FILE':    'doc-files/data-files/header.html',
           'FOOTER_FILE':    'doc-files/data-files/footer.html',
           'PROJECT_NUMBER': 'version 7.00 2006-11-02'}
    run(doxygen, ['Doxyfile'], env)
    copyIfNewer('doc-files/data-files/', 'build/install/html/')
    return 1

def install(args):
    return all(args)

def lib(args):
    return ilib(args)

def clean(args):
    return iclean(args)

def test(args):
    return itest(args)

def bin(args):
    source = 'bin/'
    dest = 'build/install/bin/'
    copyIfNewer(source, dest)
    return 0

def all(args):
    x = lib(args)
    if x == 0: x = doc(args)
    if x == 0: x = bin(args)
    if x == 0: x = test(args)
    return x

##################################################################################
def getCompilerName(args):
    if '--compiler' in args:
        for i in xrange(0, len(args)):
            if args[i] == '--compiler':
                return args[i + 1]

    # Return the default compiler for this platform
    if platform.system() == 'Windows':
        return 'vc8'
    else:
        return 'gcc'

##################################################################################
#  General
        
def buildHelp():
    print """
buildg3d - Automated build system for G3D.

Syntax: 
    buildg3d target [--compiler {vc6|vc7|vc8|xcode|gcc[version]}] [install-dir]

TARGET         DESCRIPTION

help       Display this message
all        Run lib, test, bin, and doc targets
install    Build all and copy to system directories.  Must be run as root on 'nix
lib        Build G3D, G3Dd, GLG3D, GLG3Dd and copy over headers
           On platforms for which zlib, png, jpeg, and other 
           libraries do not come with the operating system this
           will also build those libraries.
bin        Copy the bin directory to build/install/bin
test       Build test and testd and then run both
clean      Delete all generated files
doc        Generate documentation using Doxygen

makefile   Generate project/makefiles appropriate to this 
           environment, but do not run them. (Not supported yet)

Specifying the optional --compiler argument allows you to choose which
compiler to use for building the library or project/makefiles.  The defaults
are based on operating system: Xcode for OS X, gcc for Linux and FreeBSD,
and VC8 for Windows.

The return code of buildg3d is the return code of the last process it
launched (i.e., you can expect 0 on success).

Note:
The G3D team is currently evaluating two build systems, CMake and
iCompile.  The lib, test, clean, and makefile targets may be run with
either a 'c' or an 'i' prefixed (e.g., clib) to select between the
build systems.
"""

if __name__ == "__main__":
    sys.exit(dispatchOnTarget(
        [lib, clean, test,
         clib, cclean, ctest, cfastlib,
         ilib, iclean, itest,
         doc, install, bin], buildHelp))
