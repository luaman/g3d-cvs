#!/usr/bin/env python
# -*- python -*-

from buildlib import *
import os, platform, commands, sys, time
sys.path.append('bin')
import ice.copyifnewer

doxygen = 'doxygen'

distribDir = None

class Version:
    major = '7'
    minor = '00'
    beta  = '02'


def copyIfNewer(source, dest):
    if platform.system() == 'Windows':
        # Just use the binary for this
        print 'copyifnewer', source, dest
        return os.spawnv(os.P_WAIT, 'bin\\copyifnewer.exe', 
                   ['bin\\copyifnewer.exe', '--super-exclusions', source, dest])
    else:
        # Use python commands
        ice.copyifnewer.copyIfNewer(source, dest)
        return 0


##################################################################################
#  CMake targets

osTable = \
    {'Windows'  : 'win32',
     'Linux'    : 'linux',
     'Darwin'   : 'osx',
     'FreeBSD'  : 'freebsd'}

compilerTable = \
    {'vc6'      : 'Visual Studio 6',
     'vc7'      : 'Visual Studio 7',
     'vc71'     : 'Visual Studio 7 .NET 2003',
     'vc8'      : 'Visual Studio 8 2005',
     'gcc'      : 'gcc',
     'xcode'    : 'XCode'}

def platform_directory(compiler):
        
    operating_system = osTable[platform.system()]

    machine = 'i386'
    if operating_system != 'Windows':
        machine = platform.machine()

    return operating_system + '-' + machine + '-' + compiler

def process_args(args):
    if args[0] != '--compiler':
        print "Usage error: " + args[0] + " invalid option."
        exit(0)

    compilerName = compilerTable[args[1]]

    return compilerName

# Helper function for building libraries from scratch
def cbuild(subdir, args):
    x = 0
    start_dir = os.getcwd()
    build_dir = start_dir + '/build/' + subdir
    mkdir (build_dir)
    
    if (os.path.exists(build_dir)):
        os.chdir (build_dir)
        print ('Changed directory to: ' + os.getcwd())
        x = run('cmake', args)
        if x == 0: x = run('make', [])  
        os.chdir(start_dir)
    else:
        print ('Unable to change directories to:\n\t' + build_dir)
        x = 1

    return x

# Helper function for building libraries from existing CMakeLists.txt
# This will only work on make systems -- needs to be generalized
def cfastbuild(subdir):
    start_dir = os.getcwd()
    build_dir = start_dir + "/build/" + subdir
    os.chdir (build_dir)
    if (os.path.exists(build_dir)):
        print ("Changed directory to: " + os.getcwd())
        run("make", [])
        os.chdir(start_dir)
    else:
        print ("Unable to change directories to:\n\t" + build_dir)
 
def clib(cl_args):
    output_dir = "-DPLATFORM_DIR:STRING=" + platform_directory(getCompilerName(cl_args))
    args = [os.getcwd(), '-DBUILD_BINARIES:BOOL=OFF', output_dir]

    # Build Debug Version
    cbuild("Debug", args + ['-DCMAKE_BUILD_TYPE:STRING=Debug'])
    
    # Build Release Version
    cbuild("Release", args + ['-DCMAKE_BUILD_TYPE:STRING=Release'])

    # Copy code for includes and libraries goes here....

def cclean(cl_args):
    rmdir(os.getcwd() + '/build')

def ctest(cl_args):
    output_dir = "-DPLATFORM_DIR:STRING=" + platform_directory(getCompilerName(cl_args))
    args = [os.getcwd(), '-DBUILD_BINARIES:BOOL=ON', output_dir]

    # Build Debug Version
    cbuild("Debug", args + ['-DCMAKE_BUILD_TYPE:STRING=Debug'])
    
    # Build Release Version
    cbuild("Release", args + ['-DCMAKE_BUILD_TYPE:STRING=Release'])

def cfastlib(args):
    cfastbuild(platform_directory(args) + "/Debug")
    cfastbuild(platform_directory(args) + "/Release")


##################################################################################
#  iCompile targets

""" Runs iCompile in both debug and release mode (if debug succeeds) and returns
    the error code from the last run. 
"""
def runicompile(dir):
     os.chdir(dir)
     x = run('../bin/icompile', ['--noprompt'])

     if (x == 0): 
         x =run('../bin/icompile', ['-O', '--noprompt'])

     os.chdir('..')

     return x

def ilib(args):
     x = 0

     if os.name == 'nt':
         return VC8('VC8/G3D.sln', ['jpeg.lib', 'png.lib', 'zlib.lib', 'G3D.lib', 'GLG3D.lib']);

     if (os.uname()[0] == 'Darwin') or (os.name == 'nt'):
         # Build jpeg
         if x == 0: x = runicompile('jpeg.lib')

     if (os.name == 'nt'):
         # Build zlib
         if x == 0: runicompile('zlib.lib')

     if (os.name == 'nt') or (os.uname()[0] == 'Darwin'):
         # Build png
         if x == 0: x = runicompile('png.lib')

     if (x == 0):
         x = runicompile('G3D.lib')

     if (x == 0):
         x = runicompile('GLG3D.lib')

     return x


def iclean(args):
    if os.name == 'nt':
       # iCompile does not support VC8 yet, so explicitly run the project files
       return 0

    rmdir('build')
    rmdir('temp')

    os.chdir("test")
    run("../bin/icompile", ['--clean'])
    os.chdir("..")

    os.chdir("gfxmeter")
    run("../bin/icompile", ['--clean'])
    os.chdir("..")


def itest(args):
    if os.name == 'nt':
       # iCompile does not support VC8 yet, so explicitly run the project files
       return 0
    else:

        os.chdir("test")
        x = run('../bin/icompile', ['--noprompt', '--run']) 
        if (x == 0):
            x = run('../bin/icompile', ['--noprompt', '-O', '--run'])
        os.chdir('..')

        if (x == 0):
            # Make sure that the other applications can at least build
            x = runicompile('tools/gfxmeter')

        return x

################################################################################

def doc(args):

    v = Version()
    version = 'version ' + v.major + '.' + v.minor
    if (v.beta != ''):
        version += ' beta ' + v.beta
    version += ' ' + string.join([str(s) for s in time.localtime()[0:2]], '-')

    env = {'HEADER_FILE':    'doc-files/data-files/header.html',
           'FOOTER_FILE':    'doc-files/data-files/footer.html',
           'PROJECT_NUMBER': version}
    run(doxygen, ['Doxyfile'], env)
    copyIfNewer('doc-files/data-files', 'build/html')
    return 0


def data(args):
    source = 'bin'
    dest = distribDir + 'bin'
    copyIfNewer(source, dest)
    os.remove(dest + '/PKZIP25.EXE')
    
    copyIfNewer('data-files', 'build/data')
    copyIfNewer('demos', 'build/demos')

    return 0

def install(args):
    return all(args)

def lib(args):
    return ilib(args)

def clean(args):
    return iclean(args)

def test(args):
    return itest(args)

def all(args):
    x = lib(args)
    if x == 0: x = doc(args)
    if x == 0: x = data(args)
    if x == 0: x = test(args)
    return x

def src(args):
    # First copy everything to the temp directory to remove
    # CVS files
    V = Version()
    ver = 'g3d-' + V.major + '_' + V.minor
    if (V.beta != ''):
       ver += '-b' + V.beta
    copyIfNewer('./*', 'temp/src/' + ver + '/src/')
   
    os.remove('temp/src/' + ver + '/src/bin/PKZIP25.EXE')
    
    # Now produce the zipfile
    zip('temp/src/*', 'build/' + ver + '-src.zip')

##################################################################################
def getCompilerName(args = []):
    if '--compiler' in args:
        for i in xrange(0, len(args)):
            if args[i] == '--compiler':
                return args[i + 1]

    # Return the default compiler for this platform
    if platform.system() == 'Windows':
        return 'vc8'
    else:
        return 'gcc'

##################################################################################
#  General
        
def buildHelp():
    print """
buildg3d - Automated build system for G3D.

Syntax: 
    buildg3d target [--compiler {vc6|vc7|vc8|xcode|gcc[version]}] [install-dir]

TARGET     DESCRIPTION

help       Display this message

all        Run lib, test, bin, and doc targets

lib        Build G3D, G3Dd, GLG3D, GLG3Dd and copy over headers
           On platforms for which zlib, png, jpeg, and other 
           libraries do not come with the operating system this
           will also build those libraries.

data       Copy data-files to build/data and the bin 
           directory to """ + distribDir + """/bin

test       Build test and testd and then run both

src        Build an src zipfile (Win32 only)

clean      Delete all generated files

doc        Generate documentation using Doxygen

The return code of buildg3d is the return code of the last process it
launched (i.e., you can expect 0 on success).


NOTE:
The G3D team is currently evaluating two build systems, CMake and
iCompile.  The lib, test, clean, and makefile targets may be run with
either a 'c' or an 'i' prefixed (e.g., clib) to select between the
build systems.


NOT YET SUPPORTED:
install    Build all and copy to system directories.  Must be run as 
           root on Linux and FreeBSD and as an administrator on OS X

makefile   Generate project/makefiles appropriate to this 
           environment, but do not run them.

compiler   Specifying the optional --compiler argument allows 
           you to choose which compiler to use for building the 
           library or project/makefiles.  The defaults are based on
           operating system: Xcode/gcc for OS X, gcc for Linux and 
           FreeBSD, and VC8 for Windows.
"""

if __name__ == "__main__":
    distribDir = 'build/' + platform_directory(getCompilerName()) + '/'

    sys.exit(dispatchOnTarget(
        [lib, clean, test,
         clib, cclean, ctest, cfastlib,
         ilib, iclean, itest,
         doc, install, all, src, data], buildHelp))
