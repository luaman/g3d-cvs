#!/usr/bin/env python
# -*- python -*-
#

from buildlib import *
import os, platform, commands, sys, time, getopt
sys.path.append('bin')
import ice.copyifnewer

doxygen = 'doxygen'
config = []
distribDir = None

class Version:
    major = '7'
    minor = '01'
    beta  = '01'
    def toString(self):
        if (self.beta != ''):
            return self.major + '.' + self.minor + '-b' + self.beta
        else:
            return self.major + '.' + self.minor


def copyIfNewer(source, dest):
    if platform.system() == 'Windows':
        # Just use the binary for this
        print 'copyifnewer', source, dest
        return os.spawnv(os.P_WAIT, 'bin\\copyifnewer.exe', 
                   ['bin\\copyifnewer.exe', '--super-exclusions', source, dest])
    else:
        # Use python commands
        ice.copyifnewer.copyIfNewer(source, dest)
        return 0


##################################################################################
#  CMake targets

osTable = \
    {'Windows'  : 'win32',
     'Linux'    : 'linux',
     'Darwin'   : 'osx',
     'FreeBSD'  : 'freebsd'}

compilerTable = \
    {'vc6'      : 'Visual Studio 6',
     'vc7'      : 'Visual Studio 7',
     'vc71'     : 'Visual Studio 7 .NET 2003',
     'vc8'      : 'Visual Studio 8 2005',
     'gcc'      : 'gcc',
     'xcode'    : 'XCode'}

def platform_directory(compiler):
        
    operating_system = osTable[platform.system()]

    machine = 'i386'
    if operating_system != 'Windows':
        machine = platform.machine()

    return operating_system + '-' + machine + '-' + compiler

def process_args(args):
    if args[0] != '--compiler':
        print "Usage error: " + args[0] + " invalid option."
        exit(0)

    compilerName = compilerTable[args[1]]

    return compilerName


##################################################################################
#  iCompile targets

""" Runs iCompile in both debug and release mode (if debug succeeds) and returns
    the error code from the last run. 
"""
def runicompile(dir):
     os.chdir(dir)
     x = run('../bin/icompile', config + ['--noprompt'])

     if (x == 0): 
         x =run('../bin/icompile', config + ['-O', '--noprompt'])

     os.chdir('..')

     return x


def ilib(args):
     x = 0

     if os.name == 'nt':
         return VC8('VC8\\G3D.sln', ['jpeg.lib', 'png.lib', 'zlib.lib', 'zip.lib', 'G3D.lib', 'GLG3D.lib']);

     if (os.uname()[0] == 'Darwin') or (os.name == 'nt'):
         # Build jpeg
         if x == 0: x = runicompile('jpeg.lib')

     if (os.name == 'nt'):
         # Build zlib
         if x == 0: runicompile('zlib.lib')

     if (os.name == 'nt') or (os.uname()[0] == 'Darwin'):
         # Build png
         if x == 0: x = runicompile('png.lib')

     if (x == 0):
         x = runicompile('zip.lib')

     if (x == 0):
         x = runicompile('G3D.lib')

     if (x == 0):
         x = runicompile('GLG3D.lib')

     return x

def itools(args):
     if os.name == 'nt':
         return VC8('VC8\\G3D.sln', ['gfxmeter', 'viewer']);

     x = 0
     if (x == 0):
        os.chdir("tools/gfxmeter")
        x = run("../../bin/icompile", config + ['--noprompt', '--opt'])
        os.chdir("../..")

     if (x == 0):
        os.chdir("tools/viewer")
        x = run("../../bin/icompile", config + ['--noprompt', '--opt'])
        os.chdir("../..")

     return x

def iclean(args):
    if os.name == 'nt':
       # iCompile does not support VC8 yet, so explicitly run the project files
       return 0

    rmdir('build')
    rmdir('temp')

    os.chdir("test")
    run("../bin/icompile", config + ['--clean'])
    os.chdir("..")

    os.chdir("tools/gfxmeter")
    run("../../bin/icompile", config + ['--clean'])
    os.chdir("../..")

    os.chdir("tools/viewer")
    run("../../bin/icompile", config + ['--clean'])
    os.chdir("../..")


def itest(args):
    if os.name == 'nt':
       # iCompile does not support VC8 yet, so explicitly run the project files
       return 0
    else:

        os.chdir("test")
        x = run('../bin/icompile', config + ['--noprompt', '--run']) 
        if (x == 0):
            x = run('../bin/icompile', config + ['--noprompt', '-O', '--run'])
        os.chdir('..')

        return x

################################################################################

def doc(args):

    v = Version()
    version = 'version ' + v.major + '.' + v.minor
    if (v.beta != ''):
        version += ' beta ' + v.beta
    version += ' ' + string.join([str(s) for s in time.localtime()[0:2]], '-')

    env = {'HEADER_FILE':    'doc-files/data-files/header.html',
           'FOOTER_FILE':    'doc-files/data-files/footer.html',
           'PROJECT_NUMBER': version}
    run(doxygen, ['Doxyfile'], env)
    copyIfNewer('doc-files/data-files', 'build/html')
    return 0


def data(args):
    source = 'bin'
    dest = distribDir + 'bin'
    copyIfNewer(source, dest)
    os.remove(dest + '/PKZIP25.EXE')
    
    copyIfNewer('data-files', 'build/data')
    copyIfNewer('demos', 'build/demos')

    return 0

def installWin32(args):
    if (len(args) > 0):
        dest = args[0]
    else:
        dest = 'c:\\libraries'
    
    if not dest.endswith('/') and not dest.endswith('\\'):
        dest = dest + '\\'

    dest = dest + 'G3D-' + Version().toString() + '\\'
    
    print 'Installing G3D to ' + dest
    
    copyIfNewer('build/html', dest + 'html')
    copyIfNewer('build/demos', dest + 'demos')
    copyIfNewer('build/data', dest + 'data')
    copyIfNewer('build/G3D.jar', dest + 'java/')
    copyIfNewer('build/win-i386-vc8.0/*', dest)

def installUnix(args):
    if (len(args) > 0):
        dest = args[0]
    else:
        dest = '/usr/local'
    
    if not dest.endswith('/'):
        dest = dest + '/'

    datadest = dest + 'G3D-' + Version().toString() + '/'
    
    print 'Installing G3D to ' + dest
    
    copyIfNewer('build/html', datadest + 'html')
    copyIfNewer('build/demos', datadest + 'demos')
    copyIfNewer('build/data', datadest + 'data')
    copyIfNewer('build/G3D.jar', datadest  + 'java/')

    # Find build dir(s) and copy them over
    testdirs = os.listdir('build')
    operating_system = osTable[platform.system()]
    for d in testdirs:
        if (d.startswith(operating_system)):
            copyIfNewer('build/' + d, dest)
    
    

def install(args):
    x = all(args)
    if (x == 0):
        if os.name == 'nt':
            x = installWin32(args)
        else:
            x = installUnix(args)
            
    return x

def lib(args):
    return ilib(args)

def clean(args):
    return iclean(args)

def tools(args):
    return itools(args)

def test(args):
    return itest(args)

def all(args):
    x = lib(args)
    if x == 0: x = doc(args)
    if x == 0: x = data(args)
    if x == 0: x = tools(args)
    if x == 0: x = jar(args)
    if x == 0: x = test(args)
    return x

def src(args):
    # First copy everything to the temp directory to remove
    # CVS files
    V = Version()
    ver = 'G3Z-' + V.major + '.' + V.minor
    if (V.beta != ''):
       ver += '-b' + V.beta
    copyIfNewer('./*', 'temp/src/' + ver + '/src/')
   
    os.remove('temp/src/' + ver + '/src/bin/PKZIP25.EXE')
    
    # Now produce the zipfile
    zip('temp/src/*', 'build/' + ver + '-src.zip')


def jar(args):
   mkdir('temp/G3D.jar/com/graphics3d/G3D')
   mkdir('build')
   shell('javac -d temp/G3D.jar G3D.jar/com/graphics3d/G3D/*.java')

   x = 0
   if (x == 0):
      x = run('jar', ['-cf', 'build/G3D.jar', '-C', 'temp/G3D.jar', 'com'])

      if (x == 0):
         print 'Built G3D.jar'

   return x

def proj(args):

    projOptions, projArgs = getopt.getopt(args, '', ['debug', 'generator=', 'install='])
    
    buildType = 'Release'
    installDir = ''
    buildGenerator = ''
    
    for opt, arg in projOptions:    
        if opt == '--generator':
            buildGenerator = arg
            
        if opt == '--debug':
            buildType = 'Debug'

        if opt == '--install':
            installDir = arg
            
    cmakeArgs = ['-G "' + buildGenerator + '"', '-DCMAKE_BUILD_TYPE=' + buildType]
    if installDir != '':
        cmakeArgs.append('-DCMAKE_INSTALL_PREFIX="' + installDir + '"')
        
    return run('cmake', cmakeArgs)
       
##################################################################################
def getCompilerName(args = []):
    if '--compiler' in args:
        for i in xrange(0, len(args)):
            if args[i] == '--compiler':
                return args[i + 1]

    # Return the default compiler for this platform
    if platform.system() == 'Windows':
        return 'vc8'
    else:
        return 'gcc'

##################################################################################
#  General

def buildHelp():
    print """
buildg3d - Automated build system for G3D.

Syntax: 
    buildg3d [--config config-file] target [install-dir]

If the --config option is present it is passed to iCompile.  This
allows you to build G3D with different INCLUDE, LIBRARY, and compiler
settings than you normally use for writing programs.  See the iCompile
manual for more information.
Example: buildg3d --config ~/.icompile-buildg3d lib

TARGET     DESCRIPTION

install    Build all and then copy the files to the install dir.  The
           directory structure is operating system dependent.  On OS X,
           FreeBSD, and Linux, the command:

                buildg3d install /usr/local
           
           puts the include files in /usr/local/include/, the binaries
           in /usr/local/lib, tools in /usr/local/bin, and documentation 
           and data in /usr/local/G3D-""" + Version().toString() + """.  On Win32, the command:
           
                buildg3d install c:\\libraries
               
           puts the entire build tree in c:\\libraries\\G3D-""" + Version().toString() + """.
           
all        Run lib, test, bin, tools, and doc targets

tools      Build gfxmeter and viewer applications

lib        Build G3D, G3Dd, GLG3D, GLG3Dd and copy over headers
           On platforms for which zlib, png, jpeg, and other 
           libraries do not come with the operating system this
           will also build those libraries.

jar        Build G3D.jar, the Java version of network and
           file access.

data       Copy data-files to build/data and the bin 
           directory to build/<platform>/bin

test       Build test and testd and then run both

src        Build a sources zipfile (Win32 only)

clean      Delete all generated files

doc        Generate documentation using Doxygen

help       Display this message


DEVELOPER TARGETS (unsupported)

proj       Generates system-dependent makefiles and projects via cmake.
           The --generator option is required.
           
           Example:
           mkdir releaseBuild
           cd releaseBuild
           ../G3D/buildg3d proj --release --generator="MinGW Makefiles"
           
           --generator="cmake generator"
                generator string supported by cmake on build system
           --debug
                generate debug configuration (defaults to release)
           --install installDir
                sets installation target directory
                generated project will still have to make install target

The return code of buildg3d is the return code of the last process it
launched (i.e., you can expect 0 on success).
"""

if __name__ == "__main__":
    distribDir = 'build/' + platform_directory(getCompilerName()) + '/'

    argv = sys.argv
    if (len(argv) > 3 and argv[1] == '--config'):
        config = ['--config', argv[2]]
        del argv[2]
        del argv[1]
        
    sys.exit(dispatchOnTarget(argv,
        [lib, clean, test,
         ilib, iclean, itest, itools,
         doc, install, all, src, data, tools, jar, proj], buildHelp))
