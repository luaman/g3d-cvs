#!/usr/bin/env python
# -*- python -*-

from buildlib import *
import platform

##################################################################################
#  CMake targets

osTable = \
    {'WinNT'    : 'win32',
     'Linux'    : 'linux',
     'Darwin'   : 'osx',
     'FreeBSD'  : 'freebsd'}

compilerTable = \
    {'vc6'      : 'Visual Studio 6',
     'vc7'      : 'Visual Studio 7',
     'vc71'     : 'Visual Studio 7 .NET 2003',
     'vc8'      : 'Visual Studio 8 2005',
     'gcc'      : 'gcc',
     'xcode'    : 'XCode'}

def platform_directory(compiler, version):
    machine = plaform.machine()
        
    os = osTable[platform.system()]
    if (not os):
        os = 'unknown'

    return os + '-' + machine + '-' + compiler + '-' + version

def process_args(args):
    if args[0] != '--compiler':
        print "Usage error: " + args[0] + " invalid option."
        exit(0)

    compilerName = compilerTable[args[1]]

    return compilerName

# Helper function that chooses whether to build release or debug versions
def cbuild_versions(cl_args, args):
    x = 0

    if ('--release' in cl_args or '--both' in args or not ('--debug' in cl_args)):
        args.append('-DCMAKE_BUILD_TYPE:STRING=Release')
        if x == 0: x = cbuild(".cmake-release", args)

    if ('--debug' in cl_args or "--both" in args or not ('--release' in cl_args)):
        args.append('-DCMAKE_BUILD_TYPE:STRING=Debug')
        if x == 0: x = cbuild(".cmake-debug", args)

    return x

# Helper function for building libraries from scratch
def cbuild(subdir, args):
    x = 0
    build_dir = ''
    build_dir = './build/' + subdir
    mkdir (build_dir)
    os.chdir (build_dir)

    if (os.path.exists('../.' + build_dir)):
        print ('Changed directory to: ' + os.getcwd())
        x = run('cmake', args)
        if x == 0: x = run('make', [])  
        os.chdir('../../')
    else:
        print ('Unable to change directories to:\n\t' + os.getcwd() + '/build/' + subdir)
        x = 1

    return x

# Helper function for building libraries from existing CMakeLists.txt
def cfastbuild(subdir):
    build_dir = ""
    build_dir = "./build/" + subdir
    os.chdir (build_dir)
    if (os.path.exists("../." + build_dir)):
        print ("Changed directory to: " + os.getcwd())
        run("make", [])
        os.chdir("../../")
    else:
        print ("Unable to change directories to:\n\t" + os.getcwd() + "/build/" + subdir)
 
def clib(cl_args):
    args = ['../../', '-DBUILD_BINARIES:BOOL=OFF']
    return cbuild_versions(cl_args, args)

def cclean(cl_args):
    rmdir('build')

def ctest(cl_args):
    args = ['../../', '-DBUILD_BINARIES:BOOL=ON']
    return cbuild_versions(cl_args, args)
    

def cfastlib(args):
    if ('--release' in args or '--both' in args or not ('--debug' in args)):
        cfastbuild('.cmake-release')

    if ('--debug' in args or '--both' in args or not ('--release' in args)):
        cfastbuild('.cmake-debug')


##################################################################################
#  iCompile targets

""" Runs iCompile in both debug and release mode (if debug succeeds) and returns
    the error code from the last run. 
"""
def runicompile(dir):
     os.chdir(dir)
     x = run('../bin/icompile', ['--noprompt'])

     if (x == 0): 
         x =run('../bin/icompile', ['-O', '--noprompt'])

     os.chdir('..')

     return x

def ilib(args):
     x = 0

     if (os.uname()[0] == 'Darwin') or (os.uname()[0] == 'WinNT'):
         # Build jpeg
         if x == 0: x = runicompile('jpeg.lib')

     if (os.uname()[0] == 'WinNT'):
         # Build zlib
         if x == 0: runicompile('zlib.lib')

     if (os.uname()[0] == 'Darwin') or (os.uname()[0] == 'WinNT'):
         # Build png
         if x == 0: x = runicompile('png.lib')

     if (x == 0):
         x = runicompile('G3D.lib')

     if (x == 0):
         x = runicompile('GLG3D.lib')

     return x


def iclean(args):
     os.chdir("G3D.lib")
     run("../bin/icompile", ['--clean'])

     os.chdir("../GLG3D.lib")
     run("../bin/icompile", ['--clean'])

     os.chdir('../jpeg.lib')
     run("../bin/icompile", ['--clean'])

     os.chdir('../png.lib')
     run("../bin/icompile", ['--clean'])

     os.chdir("../test")
     run("../bin/icompile", ['--clean'])
     os.chdir("..")


def itest(args):
    os.chdir("test")
    x = run('../bin/icompile', ['--run'])
    if (x == 0):
        run('../bin/icompile', ['-O', '--run'])
    os.chdir("..")

################################################################################

def doc(args):
    print 'doc target not currently implemented.'

def install(args):
    x = lib(args)
    if x == 0: x = test(args)
    if x == 0: x = doc(args)

def lib(args):
    return clib(args)

def clean(args):
    return cclean(args)

def test(args):
    return ctest(args)

##################################################################################
#  General
        
def buildHelp():
    print """
buildg3d - Automated build system for G3D.

Syntax: 
    buildg3d target [--compiler {vc6|vc7|vc8|xcode|gcc[version]}] [install-dir]

TARGET         DESCRIPTION

help       Display this message
lib        Build G3D, G3Dd, GLG3D, GLG3Dd and copy over headers
           On platforms for which zlib, png, jpeg, and other 
           libraries do not come with the operating system this
           will also build those libraries.
test       Build test and testd and then run both
clean      Delete all generated files
makefile   Generate project/makefiles appropriate to this 
           environment, but do not run them.
doc        Generate documentation using Doxygen
install    Run lib, test, and doc targets

Specifying the optional --compiler argument allows you to choose which
compiler to use for building the library or project/makefiles.  The defaults
are based on operating system: Xcode for OS X, gcc for Linux and FreeBSD,
and VC8 for Windows. 

The return code of buildg3d is the return code of the last process it
launched (i.e., you can expect 0 on success).

Note:
The G3D team is currently evaluating two build systems, CMake and
iCompile.  The lib, test, clean, and makefile targets may be run with
either a 'c' or an 'i' prefixed (e.g., clib) to select between the
build systems.
"""

if __name__ == "__main__":
    sys.exit(dispatchOnTarget(
        [lib, clean, test,
         clib, cclean, ctest, cfastlib,
         ilib, iclean, itest,
         doc, install], buildHelp))
